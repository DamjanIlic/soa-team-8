version: "3.9"

services:
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8000:8000"
    depends_on:
      - tour-service
      - blog-service
      - follow-service
      - stakeholders-service

  stakeholders-db:
    image: postgres:15
    container_name: stakeholders-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super
      POSTGRES_DB: stakeholdersdb
    ports:
      - "5433:5432"
    volumes:
      - stakeholders-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  stakeholders-service:
    build:
      context: ./services/stakeholders
      dockerfile: Dockerfile
    container_name: stakeholders-service
    environment:
      DB_HOST: stakeholders-db
      DB_USER: postgres
      DB_PASSWORD: super
      DB_NAME: stakeholdersdb
      DB_PORT: 5432
      PORT: 8080
    ports:
      - "8082:8080"
    depends_on:
      stakeholders-db:
        condition: service_healthy

  tour-db:
    image: postgres:15
    container_name: tour-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super
      POSTGRES_DB: tourdb
    ports:
      - "5434:5432"
    volumes:
      - tour-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  tour-service:
    build:
      context: ./services/tour
      dockerfile: Dockerfile
    container_name: tour-service
    environment:
      DB_HOST: tour-db
      DB_USER: postgres
      DB_PASSWORD: super
      DB_NAME: tourdb
      DB_PORT: 5432
      PORT: 8080
    ports:
      - "8083:8080"
    depends_on:
      tour-db:
         condition: service_healthy

  blog-db:
    image: mongo:7
    container_name: blog-db
    environment:
      MONGO_INITDB_DATABASE: blog
    ports:
      - "27017:27017"
    volumes:
      - blog-data:/data/db

  blog-service:
    build:
      context: ./services/blog
      dockerfile: Dockerfile
    container_name: blog-service
    environment:
      MONGO_URI: mongodb://blog-db:27017
      DB_NAME: blog
      PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      - blog-db

  follow-service:
    build:
      context: ./services/follow
      dockerfile: Dockerfile
    container_name: follow-service
    ports:
      - "8081:8080"
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: supersecret
    depends_on:
      - neo4j
    volumes:
      - ./services/follow/app:/app

  purchase-db:
    image: postgres:15
    container_name: purchase-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super
      POSTGRES_DB: purchasedb
    ports:
      - "5435:5432"
    volumes:
      - purchase-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  purchase-service:
    build:
      context: ./services/purchase
      dockerfile: Dockerfile
    container_name: purchase-service
    environment:
      DB_HOST: purchase-db
      DB_USER: postgres
      DB_PASSWORD: super
      DB_NAME: purchasedb
      DB_PORT: 5432
      PORT: 8080
    ports:
      - "8087:8080"
    depends_on:
      purchase-db:
        condition: service_healthy

  neo4j:
    image: neo4j:5
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: "neo4j/supersecret"
    volumes:
      - neo4j-data:/data

  auth-service:
    build:
      context: ./services/auth   
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      DB_HOST: stakeholders-db
      DB_USER: postgres
      DB_PASSWORD: super
      DB_NAME: stakeholdersdb
      DB_PORT: 5432
    ports:
      - "8086:8080"
    depends_on:
      stakeholders-db:
        condition: service_healthy
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tourism-frontend
    ports:
      - "4200:4200"
    # volumes:
    #   - ./frontend:/app       # mapira lokalni folder za hot reload
    depends_on:
      - api-gateway           # ili direktno na servis koji treba da zove≈°
  

volumes:
  stakeholders-data:
  tour-data:
  blog-data:
  purchase-data:
  neo4j-data:

